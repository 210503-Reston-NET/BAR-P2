// <auto-generated />
using BCDL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace BCDL.Migrations
{
    [DbContext(typeof(BookClubDBContext))]
    [Migration("20210615201526_ForeignKeysUpdate")]
    partial class ForeignKeysUpdate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.7")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("BCModel.Achievement", b =>
                {
                    b.Property<int>("AchievementId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Badge")
                        .HasColumnType("text");

                    b.Property<string>("UserEmail")
                        .HasColumnType("text");

                    b.Property<string>("UserEmail1")
                        .HasColumnType("text");

                    b.HasKey("AchievementId");

                    b.HasIndex("UserEmail1");

                    b.ToTable("Achievements");
                });

            modelBuilder.Entity("BCModel.Book", b =>
                {
                    b.Property<string>("ISBN")
                        .HasColumnType("text");

                    b.Property<string>("Author")
                        .HasColumnType("text");

                    b.Property<string>("CategoryId")
                        .HasColumnType("text");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.HasKey("ISBN");

                    b.HasIndex("CategoryId");

                    b.ToTable("Books");
                });

            modelBuilder.Entity("BCModel.BookClub", b =>
                {
                    b.Property<int>("BookClubId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("BookISBN")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("ISBN")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("UserEmail")
                        .HasColumnType("text");

                    b.Property<string>("UserEmail1")
                        .HasColumnType("text");

                    b.HasKey("BookClubId");

                    b.HasIndex("BookISBN");

                    b.HasIndex("UserEmail1");

                    b.ToTable("BookClubs");
                });

            modelBuilder.Entity("BCModel.BooksRead", b =>
                {
                    b.Property<int>("BooksReadId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("BookISBN")
                        .HasColumnType("text");

                    b.Property<int>("BookPages")
                        .HasColumnType("integer");

                    b.Property<string>("ISBN")
                        .HasColumnType("text");

                    b.Property<string>("UserEmail")
                        .HasColumnType("text");

                    b.Property<string>("UserEmail1")
                        .HasColumnType("text");

                    b.HasKey("BooksReadId");

                    b.HasIndex("BookISBN");

                    b.HasIndex("UserEmail1");

                    b.ToTable("BooksRead");
                });

            modelBuilder.Entity("BCModel.BooksToRead", b =>
                {
                    b.Property<int>("BooksToReadId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("BookISBN")
                        .HasColumnType("text");

                    b.Property<string>("ISBN")
                        .HasColumnType("text");

                    b.Property<string>("UserEmail")
                        .HasColumnType("text");

                    b.Property<string>("UserEmail1")
                        .HasColumnType("text");

                    b.HasKey("BooksToReadId");

                    b.HasIndex("BookISBN");

                    b.HasIndex("UserEmail1");

                    b.ToTable("BooksToRead");
                });

            modelBuilder.Entity("BCModel.Category", b =>
                {
                    b.Property<string>("CategoryId")
                        .HasColumnType("text");

                    b.HasKey("CategoryId");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("BCModel.ClubPost", b =>
                {
                    b.Property<int>("ClubPostId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("BookClubId")
                        .HasColumnType("integer");

                    b.Property<string>("Post")
                        .HasColumnType("text");

                    b.Property<int>("TotalDislike")
                        .HasColumnType("integer");

                    b.Property<int>("TotalLike")
                        .HasColumnType("integer");

                    b.Property<string>("UserEmail")
                        .HasColumnType("text");

                    b.Property<string>("UserEmail1")
                        .HasColumnType("text");

                    b.HasKey("ClubPostId");

                    b.HasIndex("BookClubId");

                    b.HasIndex("UserEmail1");

                    b.ToTable("ClubPosts");
                });

            modelBuilder.Entity("BCModel.ClubPostLikes", b =>
                {
                    b.Property<int>("ClubPostLikesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("ClubPostId")
                        .HasColumnType("integer");

                    b.Property<bool>("Dislike")
                        .HasColumnType("boolean");

                    b.Property<bool>("Like")
                        .HasColumnType("boolean");

                    b.Property<string>("UserEmail")
                        .HasColumnType("text");

                    b.Property<string>("UserEmail1")
                        .HasColumnType("text");

                    b.HasKey("ClubPostLikesId");

                    b.HasIndex("ClubPostId");

                    b.HasIndex("UserEmail1");

                    b.ToTable("ClubPostLikes");
                });

            modelBuilder.Entity("BCModel.Comment", b =>
                {
                    b.Property<int>("CommentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("ClubPostID")
                        .HasColumnType("integer");

                    b.Property<string>("Message")
                        .HasColumnType("text");

                    b.Property<string>("UserEmail")
                        .HasColumnType("text");

                    b.Property<string>("UserEmail1")
                        .HasColumnType("text");

                    b.Property<int>("UserPostID")
                        .HasColumnType("integer");

                    b.HasKey("CommentId");

                    b.HasIndex("ClubPostID");

                    b.HasIndex("UserEmail1");

                    b.HasIndex("UserPostID");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("BCModel.CommentLikes", b =>
                {
                    b.Property<int>("CommentLikesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("ClubPostId")
                        .HasColumnType("integer");

                    b.Property<int>("CommentId")
                        .HasColumnType("integer");

                    b.Property<bool>("Dislike")
                        .HasColumnType("boolean");

                    b.Property<bool>("Like")
                        .HasColumnType("boolean");

                    b.Property<string>("UserEmail")
                        .HasColumnType("text");

                    b.Property<string>("UserEmail1")
                        .HasColumnType("text");

                    b.Property<int>("UserPostId")
                        .HasColumnType("integer");

                    b.HasKey("CommentLikesId");

                    b.HasIndex("ClubPostId");

                    b.HasIndex("CommentId");

                    b.HasIndex("UserEmail1");

                    b.HasIndex("UserPostId");

                    b.ToTable("CommentLikes");
                });

            modelBuilder.Entity("BCModel.FavoriteBook", b =>
                {
                    b.Property<int>("FavoriteBookId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("BookISBN")
                        .HasColumnType("text");

                    b.Property<string>("ISBN")
                        .HasColumnType("text");

                    b.Property<string>("UserEmail")
                        .HasColumnType("text");

                    b.Property<string>("UserEmail1")
                        .HasColumnType("text");

                    b.HasKey("FavoriteBookId");

                    b.HasIndex("BookISBN");

                    b.HasIndex("UserEmail1");

                    b.ToTable("FavoriteBooks");
                });

            modelBuilder.Entity("BCModel.FollowClub", b =>
                {
                    b.Property<int>("FollowClubId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("BookClubId")
                        .HasColumnType("integer");

                    b.Property<string>("FollowerEmail")
                        .HasColumnType("text");

                    b.HasKey("FollowClubId");

                    b.HasIndex("BookClubId");

                    b.ToTable("FollowClubs");
                });

            modelBuilder.Entity("BCModel.FollowUser", b =>
                {
                    b.Property<int>("FollowUserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("FollowerEmail")
                        .HasColumnType("text");

                    b.Property<string>("UserEmail")
                        .HasColumnType("text");

                    b.Property<string>("UserEmail1")
                        .HasColumnType("text");

                    b.HasKey("FollowUserId");

                    b.HasIndex("UserEmail1");

                    b.ToTable("FollowUsers");
                });

            modelBuilder.Entity("BCModel.Recommendation", b =>
                {
                    b.Property<int>("RecommendationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("BookISBN")
                        .HasColumnType("text");

                    b.Property<string>("ISBN")
                        .HasColumnType("text");

                    b.Property<string>("Message")
                        .HasColumnType("text");

                    b.Property<string>("ReceversEmails")
                        .HasColumnType("text");

                    b.Property<string>("UserEmail")
                        .HasColumnType("text");

                    b.Property<string>("UserEmail1")
                        .HasColumnType("text");

                    b.HasKey("RecommendationId");

                    b.HasIndex("BookISBN");

                    b.HasIndex("UserEmail1");

                    b.ToTable("Recommendations");
                });

            modelBuilder.Entity("BCModel.User", b =>
                {
                    b.Property<string>("UserEmail")
                        .HasColumnType("text");

                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.Property<int>("PagesRead")
                        .HasColumnType("integer");

                    b.Property<string>("Password")
                        .HasColumnType("text");

                    b.HasKey("UserEmail");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("BCModel.UserPost", b =>
                {
                    b.Property<int>("UserPostId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Post")
                        .HasColumnType("text");

                    b.Property<int>("TotalDislike")
                        .HasColumnType("integer");

                    b.Property<int>("TotalLike")
                        .HasColumnType("integer");

                    b.Property<string>("UserEmail")
                        .HasColumnType("text");

                    b.Property<string>("UserEmail1")
                        .HasColumnType("text");

                    b.HasKey("UserPostId");

                    b.HasIndex("UserEmail1");

                    b.ToTable("UserPosts");
                });

            modelBuilder.Entity("BCModel.UserPostLikes", b =>
                {
                    b.Property<int>("UserPostLikesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<bool>("Dislike")
                        .HasColumnType("boolean");

                    b.Property<bool>("Like")
                        .HasColumnType("boolean");

                    b.Property<string>("UserEmail")
                        .HasColumnType("text");

                    b.Property<string>("UserEmail1")
                        .HasColumnType("text");

                    b.Property<int>("UserPostId")
                        .HasColumnType("integer");

                    b.HasKey("UserPostLikesId");

                    b.HasIndex("UserEmail1");

                    b.HasIndex("UserPostId");

                    b.ToTable("UserPostLikes");
                });

            modelBuilder.Entity("BCModel.Achievement", b =>
                {
                    b.HasOne("BCModel.User", null)
                        .WithMany("Achievements")
                        .HasForeignKey("UserEmail1");
                });

            modelBuilder.Entity("BCModel.Book", b =>
                {
                    b.HasOne("BCModel.Category", null)
                        .WithMany("Books")
                        .HasForeignKey("CategoryId");
                });

            modelBuilder.Entity("BCModel.BookClub", b =>
                {
                    b.HasOne("BCModel.Book", null)
                        .WithMany("BookClubs")
                        .HasForeignKey("BookISBN");

                    b.HasOne("BCModel.User", null)
                        .WithMany("BookClub")
                        .HasForeignKey("UserEmail1");
                });

            modelBuilder.Entity("BCModel.BooksRead", b =>
                {
                    b.HasOne("BCModel.Book", null)
                        .WithMany("BooksReads")
                        .HasForeignKey("BookISBN");

                    b.HasOne("BCModel.User", null)
                        .WithMany("BooksReads")
                        .HasForeignKey("UserEmail1");
                });

            modelBuilder.Entity("BCModel.BooksToRead", b =>
                {
                    b.HasOne("BCModel.Book", null)
                        .WithMany("BooksToReads")
                        .HasForeignKey("BookISBN");

                    b.HasOne("BCModel.User", null)
                        .WithMany("BooksToReads")
                        .HasForeignKey("UserEmail1");
                });

            modelBuilder.Entity("BCModel.ClubPost", b =>
                {
                    b.HasOne("BCModel.BookClub", null)
                        .WithMany("ClubPosts")
                        .HasForeignKey("BookClubId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BCModel.User", null)
                        .WithMany("ClubPosts")
                        .HasForeignKey("UserEmail1");
                });

            modelBuilder.Entity("BCModel.ClubPostLikes", b =>
                {
                    b.HasOne("BCModel.ClubPost", null)
                        .WithMany("ClubPostLikes")
                        .HasForeignKey("ClubPostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BCModel.User", null)
                        .WithMany("ClubPostLikes")
                        .HasForeignKey("UserEmail1");
                });

            modelBuilder.Entity("BCModel.Comment", b =>
                {
                    b.HasOne("BCModel.ClubPost", null)
                        .WithMany("Comments")
                        .HasForeignKey("ClubPostID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BCModel.User", null)
                        .WithMany("Comments")
                        .HasForeignKey("UserEmail1");

                    b.HasOne("BCModel.UserPost", null)
                        .WithMany("Comments")
                        .HasForeignKey("UserPostID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BCModel.CommentLikes", b =>
                {
                    b.HasOne("BCModel.ClubPost", null)
                        .WithMany("CommentLikes")
                        .HasForeignKey("ClubPostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BCModel.Comment", null)
                        .WithMany("CommentLikes")
                        .HasForeignKey("CommentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BCModel.User", null)
                        .WithMany("CommentLikes")
                        .HasForeignKey("UserEmail1");

                    b.HasOne("BCModel.UserPost", null)
                        .WithMany("CommentLikes")
                        .HasForeignKey("UserPostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BCModel.FavoriteBook", b =>
                {
                    b.HasOne("BCModel.Book", null)
                        .WithMany("FavoriteBooks")
                        .HasForeignKey("BookISBN");

                    b.HasOne("BCModel.User", null)
                        .WithMany("FavoriteBooks")
                        .HasForeignKey("UserEmail1");
                });

            modelBuilder.Entity("BCModel.FollowClub", b =>
                {
                    b.HasOne("BCModel.BookClub", null)
                        .WithMany("FollowClubs")
                        .HasForeignKey("BookClubId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BCModel.FollowUser", b =>
                {
                    b.HasOne("BCModel.User", null)
                        .WithMany("FollowUsers")
                        .HasForeignKey("UserEmail1");
                });

            modelBuilder.Entity("BCModel.Recommendation", b =>
                {
                    b.HasOne("BCModel.Book", null)
                        .WithMany("Recommendations")
                        .HasForeignKey("BookISBN");

                    b.HasOne("BCModel.User", null)
                        .WithMany("Recommendations")
                        .HasForeignKey("UserEmail1");
                });

            modelBuilder.Entity("BCModel.UserPost", b =>
                {
                    b.HasOne("BCModel.User", null)
                        .WithMany("UserPosts")
                        .HasForeignKey("UserEmail1");
                });

            modelBuilder.Entity("BCModel.UserPostLikes", b =>
                {
                    b.HasOne("BCModel.User", null)
                        .WithMany("UserPostLikes")
                        .HasForeignKey("UserEmail1");

                    b.HasOne("BCModel.UserPost", null)
                        .WithMany("UserPostLikes")
                        .HasForeignKey("UserPostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BCModel.Book", b =>
                {
                    b.Navigation("BookClubs");

                    b.Navigation("BooksReads");

                    b.Navigation("BooksToReads");

                    b.Navigation("FavoriteBooks");

                    b.Navigation("Recommendations");
                });

            modelBuilder.Entity("BCModel.BookClub", b =>
                {
                    b.Navigation("ClubPosts");

                    b.Navigation("FollowClubs");
                });

            modelBuilder.Entity("BCModel.Category", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("BCModel.ClubPost", b =>
                {
                    b.Navigation("ClubPostLikes");

                    b.Navigation("CommentLikes");

                    b.Navigation("Comments");
                });

            modelBuilder.Entity("BCModel.Comment", b =>
                {
                    b.Navigation("CommentLikes");
                });

            modelBuilder.Entity("BCModel.User", b =>
                {
                    b.Navigation("Achievements");

                    b.Navigation("BookClub");

                    b.Navigation("BooksReads");

                    b.Navigation("BooksToReads");

                    b.Navigation("ClubPostLikes");

                    b.Navigation("ClubPosts");

                    b.Navigation("CommentLikes");

                    b.Navigation("Comments");

                    b.Navigation("FavoriteBooks");

                    b.Navigation("FollowUsers");

                    b.Navigation("Recommendations");

                    b.Navigation("UserPostLikes");

                    b.Navigation("UserPosts");
                });

            modelBuilder.Entity("BCModel.UserPost", b =>
                {
                    b.Navigation("CommentLikes");

                    b.Navigation("Comments");

                    b.Navigation("UserPostLikes");
                });
#pragma warning restore 612, 618
        }
    }
}
